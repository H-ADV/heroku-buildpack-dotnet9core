#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # Always exit on error
set -o pipefail   # Don't ignore exit codes when piping output
set -o nounset    # Fail on unset variables

unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies
source "$BP_DIR/bin/util/common.sh"
source "$BP_DIR/bin/util/apt_dpkg_install.sh"

export_env_dir "$ENV_DIR"

# Get OS version
herokuos_version="$(get_linux_platform_version)"

print "OS: Ubuntu $herokuos_version"
print "Stack version: ${STACK}"

print "Installing prerequisites for .NET Core on Ubuntu"
if [[ $herokuos_version == "16.04" ]]; then
	apt_install libicu55 openssl1.0
elif [[ $herokuos_version == "18.04" ]]; then
	apt_install libicu60 openssl1.0
elif [[ $herokuos_version == "20.04" ]]; then
	apt_install libicu66 libssl1.1
elif [[ $herokuos_version == "22.04" || $herokuos_version == "24.04" ]]; then
	apt_install apt-transport-https libicu-dev libssl3 libunwind8 libgssapi-krb5-2 libc6 liblttng-ust1
else
	print "Unsupported OS version: $herokuos_version"
	exit 1
fi

# Fix apt-cache permission errors
sudo rm -rf /var/cache/apt/archives/partial/*.deb || true

# Install fallback ICU library if needed
if ! dpkg-query -W libicu-dev &>/dev/null; then
    print "Manually installing libicu70-compatible library"
    curl -O http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu70_70.1-2ubuntu2_amd64.deb
    sudo dpkg -i libicu70_70.1-2ubuntu2_amd64.deb
    rm libicu70_70.1-2ubuntu2_amd64.deb
fi

# Skip TELEMETRY_OPTOUT on production environment
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}
export ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-production}

while IFS='' read -r -d '' filename; do
	declare project_dir
	
	# Get project directory path
	project_dir=$(dirname $filename)
	print "The project directory path: ${project_dir}"
	
	# Get netcore framework version
	framework_version="$(get_framework_version $project_dir)"
	print "The netcore framework version: ${framework_version}"

	# Get dotnet runtime version
	runtime_framework_version="$(get_specific_version $BUILD_DIR)"
	if [[ -z $runtime_framework_version ]]; then	
		runtime_framework_version="$(get_runtime_framework_version $project_dir)"		
	fi
	print "The dotnet runtime version: ${runtime_framework_version} to be installed"

	# dotnet installation
	$BP_DIR/bin/util/dotnet-install.sh --architecture x64 --channel $framework_version --version $runtime_framework_version --install-dir $BUILD_DIR/.dotnet
	
	break

done < <(find $BUILD_DIR -maxdepth 2 -name "*.csproj" -print0)

# Add symbolic link for dotnet
if [[ $BUILD_DIR != '/app' ]]; then
	# Subsequent buildpacks can still invoke it
	ln -s ${BUILD_DIR}/.dotnet $HOME
fi

# Add dotnet runtime path to environment variable that is available to access dotnet command
export PATH="$PATH:$HOME/.dotnet"

# Check for WebAssembly runtime pack
if ! dotnet list package | grep -q "Microsoft.NETCore.App.Runtime.Browser"; then
	print "Error: Unable to resolve WebAssembly runtime pack version"
	exit 1
fi

## List installed dotnet runtimes
dotnet --list-runtimes

PROFILE_PATH="$BUILD_DIR/.profile.d/dotnetcore.sh"
mkdir -p $(dirname $PROFILE_PATH)

# Export vars
echo 'export DOTNET_ROOT=$HOME/.dotnet' >> $PROFILE_PATH
echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> $PROFILE_PATH
echo 'export PATH="$PATH:$HOME/.dotnet:$HOME/.apt/usr/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export INCLUDE_PATH="$INCLUDE_PATH:$HOME/.apt/usr/include"' >> $PROFILE_PATH
echo 'export CPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export CPPPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo "export DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $PROFILE_PATH

# Get solution file from build directory
SOLUTION_FILE="$(get_project_sln_file $BUILD_DIR)"

if [[ ${#SOLUTION_FILE} -eq 0 ]]; then
	print "Error: No solution file (.sln) found in the build directory."
	exit 1
fi

print "Building solution: $SOLUTION_FILE"
dotnet build $SOLUTION_FILE --no-incremental --configuration Release
